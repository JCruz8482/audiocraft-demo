// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: gen-service.proto

package gen_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AudioCraftGenServiceClient is the client API for AudioCraftGenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudioCraftGenServiceClient interface {
	GetAudioStream(ctx context.Context, in *GetAudioStreamRequest, opts ...grpc.CallOption) (AudioCraftGenService_GetAudioStreamClient, error)
}

type audioCraftGenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioCraftGenServiceClient(cc grpc.ClientConnInterface) AudioCraftGenServiceClient {
	return &audioCraftGenServiceClient{cc}
}

func (c *audioCraftGenServiceClient) GetAudioStream(ctx context.Context, in *GetAudioStreamRequest, opts ...grpc.CallOption) (AudioCraftGenService_GetAudioStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AudioCraftGenService_ServiceDesc.Streams[0], "/genservice.AudioCraftGenService/GetAudioStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioCraftGenServiceGetAudioStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AudioCraftGenService_GetAudioStreamClient interface {
	Recv() (*GetAudioStreamResponse, error)
	grpc.ClientStream
}

type audioCraftGenServiceGetAudioStreamClient struct {
	grpc.ClientStream
}

func (x *audioCraftGenServiceGetAudioStreamClient) Recv() (*GetAudioStreamResponse, error) {
	m := new(GetAudioStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioCraftGenServiceServer is the server API for AudioCraftGenService service.
// All implementations must embed UnimplementedAudioCraftGenServiceServer
// for forward compatibility
type AudioCraftGenServiceServer interface {
	GetAudioStream(*GetAudioStreamRequest, AudioCraftGenService_GetAudioStreamServer) error
	mustEmbedUnimplementedAudioCraftGenServiceServer()
}

// UnimplementedAudioCraftGenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAudioCraftGenServiceServer struct {
}

func (UnimplementedAudioCraftGenServiceServer) GetAudioStream(*GetAudioStreamRequest, AudioCraftGenService_GetAudioStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAudioStream not implemented")
}
func (UnimplementedAudioCraftGenServiceServer) mustEmbedUnimplementedAudioCraftGenServiceServer() {}

// UnsafeAudioCraftGenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioCraftGenServiceServer will
// result in compilation errors.
type UnsafeAudioCraftGenServiceServer interface {
	mustEmbedUnimplementedAudioCraftGenServiceServer()
}

func RegisterAudioCraftGenServiceServer(s grpc.ServiceRegistrar, srv AudioCraftGenServiceServer) {
	s.RegisterService(&AudioCraftGenService_ServiceDesc, srv)
}

func _AudioCraftGenService_GetAudioStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAudioStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AudioCraftGenServiceServer).GetAudioStream(m, &audioCraftGenServiceGetAudioStreamServer{stream})
}

type AudioCraftGenService_GetAudioStreamServer interface {
	Send(*GetAudioStreamResponse) error
	grpc.ServerStream
}

type audioCraftGenServiceGetAudioStreamServer struct {
	grpc.ServerStream
}

func (x *audioCraftGenServiceGetAudioStreamServer) Send(m *GetAudioStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AudioCraftGenService_ServiceDesc is the grpc.ServiceDesc for AudioCraftGenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioCraftGenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genservice.AudioCraftGenService",
	HandlerType: (*AudioCraftGenServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAudioStream",
			Handler:       _AudioCraftGenService_GetAudioStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gen-service.proto",
}
